name: CI-CD-Security-AI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # ----------------------
  # 1. Detect Language & Build/Test
  # ----------------------
  build-test:
    runs-on: ubuntu-latest
    outputs:
      lang: ${{ steps.detect.outputs.lang }}
    steps:
      - uses: actions/checkout@v4

      - name: Detect Application Language
        id: detect
        run: |
          if [ -f "pom.xml" ]; then
            echo "lang=java" >> $GITHUB_OUTPUT
          elif [ -f "package.json" ]; then
            echo "lang=node" >> $GITHUB_OUTPUT
          elif [ -f "requirements.txt" ]; then
            echo "lang=python" >> $GITHUB_OUTPUT
          elif ls *.sln >/dev/null 2>&1; then
            echo "lang=dotnet" >> $GITHUB_OUTPUT
          else
            echo "lang=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Run Unit Tests & Coverage
        run: |
          case "${{ steps.detect.outputs.lang }}" in
            java)
              mvn test
              echo "coverage-java.txt" > coverage-java.txt
              ;;
            node)
              npm install
              npm test
              echo "coverage-node.txt" > coverage-node.txt
              ;;
            python)
              pip install -r requirements.txt
              pytest --junitxml=coverage-python.txt
              ;;
            dotnet)
              dotnet test
              echo "coverage-dotnet.txt" > coverage-dotnet.txt
              ;;
            *)
              echo "No supported language detected"
              exit 1
              ;;
          esac

      - uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage-*.txt

  # ----------------------
  # 2. SAST (Static Scans)
  # ----------------------
  sast:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Detect Application Language
        id: detect
        run: |
          if [ -f "pom.xml" ]; then
            echo "lang=java" >> $GITHUB_OUTPUT
          elif [ -f "package.json" ]; then
            echo "lang=node" >> $GITHUB_OUTPUT
          elif [ -f "requirements.txt" ]; then
            echo "lang=python" >> $GITHUB_OUTPUT
          elif ls *.sln >/dev/null 2>&1; then
            echo "lang=dotnet" >> $GITHUB_OUTPUT
          else
            echo "lang=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Run SAST Only if Relevant
        run: |
          if [ "${{ steps.detect.outputs.lang }}" = "unknown" ]; then
            echo "Skipping SAST, no supported language found"
          else
            echo "Running Semgrep..."
            # semgrep --config=auto .
            echo "Running Trivy FS..."
            # trivy fs . > trivy-sast.txt
            echo "trivy-sast.txt" > trivy-sast.txt
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: sast-results
          path: trivy-sast.txt

  # ----------------------
  # 4. AI Report for CI
  # ----------------------
  ai-ci:
    needs: [sast, container-scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: reports

      - uses: actions/download-artifact@v4
        with:
          name: sast-results
          path: reports

      - uses: actions/download-artifact@v4
        with:
          name: container-results
          path: reports

      - name: Install Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh | sh
          ollama pull codellama

      - name: Collect CI Reports
        run: |
          echo "## Unit Test & Coverage (CI)" > ai-ci-input.md
          cat reports/coverage-*.txt >> ai-ci-input.md || true
          echo "## SAST Results" >> ai-ci-input.md
          cat reports/trivy-sast.txt >> ai-ci-input.md || true
          echo "## Container Scan" >> ai-ci-input.md
          cat reports/trivy-image.txt >> ai-ci-input.md || true

      - name: Generate AI CI Suggestions
        run: |
          cat ai-ci-input.md | ollama run codellama > ai-ci-suggestions.md

      - uses: actions/upload-artifact@v4
        with:
          name: ai-ci-suggestions
          path: ai-ci-suggestions.md
